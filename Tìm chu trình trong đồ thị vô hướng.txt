//https://cses.fi/problemset/task/1669/
///===========================================
int n , m , x , y , d[100005] , kt = 0 , vt[100005];
vector<int>g[100005];
vector<int>path;
///===========================================
///===========================================
///===========================================
///===========================================
bool DFS(int u,int pr)
{
    d[u]=1;
    path.push_back(u);
    for (int gt : g[u])
    {
        if (d[gt] && u != gt && pr != gt)
        {
            path.push_back(gt);
            return true;
        }
        if ( !d[gt] && DFS(gt,u) ) return true;
    }
    path.pop_back();
    return false;
}
///===========================================
///===========================================
///===========================================
int main()
{
    pk(); rose();
    cin >> n >> m;
    for (int i = 1; i <= m; i++)
    {
        cin >> x >> y;
        g[x].push_back(y);
        g[y].push_back(x);
    }
    for (int i = 1; i <= n; i++)
        if ( !d[i] && DFS(i,0) )
        {
            int vv = 0;
            for (int j = 0; j < path.size(); j++)
            {
                if ( vt[path[j]] )
                {
                    vv = j+1;
                    break;
                }
                vt[path[j]] = j+1;
            }
            //cout << vv <<"\n";
            cout << vv - vt[path[vv-1]] + 1  <<"\n";
            for (int j = vt[path[vv-1]]; j <= vv; j++)
                cout << path[j-1] <<" ";
            return 0;
        }
    cout <<"IMPOSSIBLE";
}
///===========================================