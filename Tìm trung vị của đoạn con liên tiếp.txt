//Tìm trung vị của đoạn con từ i đến i+k-1
int n , k , a[200005] , b[200005];
multiset<int>l,r;
///===========================================
///===========================================
///===========================================
///===========================================
///===========================================
///===========================================
///===========================================
///===========================================
///===========================================
int main()
{
    pk(); rose();
    cin >> n >> k;
    for (int i = 1; i <= n; i++) cin >> a[i];
    if ( k == 1 )
    {
        for (int i = 1; i <= n; i++)
            cout << a[i] <<" ";
        return 0;
    }
    for (int i = 1; i <= k; i++)
        b[i] = a[i];
    sort(b+1,b+k+1);
    for (int i = 1; i <= (k/2); i++)
        l.insert(b[i]);
    for (int i = (k/2)+1; i <= k; i++)
        r.insert(b[i]);
    if ( k & 1 )
    {
        auto it = r.begin();
        cout << *it <<" ";
    }
    else
    {
        auto it = l.end();
        it --;
        cout << *it <<" ";
    }
    for (int i = 2; i <= n-k+1; i++)
    {
        r.insert(a[i+k-1]);
        auto it = l.lower_bound(a[i-1]);
        if ( it != l.end() )
        {
            l.erase(it);
            it = r.begin();
            l.insert(*it);
            r.erase(it);
        }
        else
        {
            it = r.lower_bound(a[i-1]);
            r.erase(it);
        }
        it = l.end();
        it --;
        int val1 = *it;
        it = r.begin();
        if ( val1 > *it )
        {
            l.insert(*it);
            it = l.lower_bound(val1);
            l.erase(it);
            it = r.begin();
            r.erase(it);
            r.insert(val1);
        }
        if ( k & 1 )
        {
            auto it = r.begin();
            cout << *it <<" ";
        }
        else
        {
            auto it = l.end();
            it --;
            cout << *it <<" ";
        }
    }
}
///===========================================

